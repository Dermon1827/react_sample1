{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { calculateWinner } from \"../utils/calculateWinner\";\nexport const useGameControl = () => {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null)\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n\n  const handleClickSquare = i => {\n    const copyedHistory = history.slice(0, stepNumber + 1);\n    const current = history[copyedHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(copyedHistory.concat([{\n      squares: squares\n    }]));\n    setStepNumber(copyedHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpToPast = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  return {\n    history,\n    stepNumber,\n    xIsNext,\n    handleClickSquare,\n    jumpToPast\n  };\n};\n\n_s(useGameControl, \"ronvp4b9+63BoX2RNWiucqV470E=\");","map":{"version":3,"sources":["C:/Users/harud/sample/src/hooks/useGameControl.tsx"],"names":["useState","calculateWinner","useGameControl","history","setHistory","squares","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","handleClickSquare","i","copyedHistory","slice","current","length","concat","jumpToPast","step"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,SAAQC,eAAR,QAA8B,0BAA9B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAqB,CAAC;AAACK,IAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AAAV,GAAD,CAArB,CAAtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAS,CAAT,CAA5C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAU,IAAV,CAAtC;;AAEA,QAAMY,iBAAiB,GAAIC,CAAD,IAAe;AACvC,UAAMC,aAAa,GAAGX,OAAO,CAACY,KAAR,CAAc,CAAd,EAAiBP,UAAU,GAAG,CAA9B,CAAtB;AACA,UAAMQ,OAAO,GAAGb,OAAO,CAACW,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAvB;AACA,UAAMZ,OAAO,GAAGW,OAAO,CAACX,OAAR,CAAgBU,KAAhB,EAAhB;;AACA,QAAId,eAAe,CAACI,OAAD,CAAf,IAA4BA,OAAO,CAACQ,CAAD,CAAvC,EAA4C;AAC1C;AACD;;AACDR,IAAAA,OAAO,CAACQ,CAAD,CAAP,GAAaH,OAAO,GAAG,GAAH,GAAS,GAA7B;AACAN,IAAAA,UAAU,CAACU,aAAa,CAACI,MAAd,CAAqB,CAC9B;AACEb,MAAAA,OAAO,EAAEA;AADX,KAD8B,CAArB,CAAD,CAAV;AAKAI,IAAAA,aAAa,CAACK,aAAa,CAACG,MAAf,CAAb;AACAN,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAfD;;AAiBA,QAAMS,UAAU,GAAIC,IAAD,IAAkB;AACnCX,IAAAA,aAAa,CAACW,IAAD,CAAb;AACAT,IAAAA,UAAU,CAAES,IAAI,GAAG,CAAR,KAAe,CAAhB,CAAV;AACD,GAHD;;AAKA,SAAO;AAACjB,IAAAA,OAAD;AAAUK,IAAAA,UAAV;AAAsBE,IAAAA,OAAtB;AAA+BE,IAAAA,iBAA/B;AAAkDO,IAAAA;AAAlD,GAAP;AACD,CA5BM;;GAAMjB,c","sourcesContent":["import {useState} from \"react\";\r\nimport {historyType} from \"../types/historyType\";\r\nimport {calculateWinner} from \"../utils/calculateWinner\";\r\n\r\nexport const useGameControl = () => {\r\n  const [history, setHistory] = useState<Array<historyType>>([{squares: Array(9).fill(null)}])\r\n  const [stepNumber, setStepNumber] = useState<number>(0);\r\n  const [xIsNext, setXIsNext] = useState<boolean>(true);\r\n\r\n  const handleClickSquare = (i: number) => {\r\n    const copyedHistory = history.slice(0, stepNumber + 1);\r\n    const current = history[copyedHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(copyedHistory.concat([\r\n      {\r\n        squares: squares\r\n      }\r\n    ]));\r\n    setStepNumber(copyedHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  const jumpToPast = (step: number) => {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  }\r\n\r\n  return {history, stepNumber, xIsNext, handleClickSquare, jumpToPast};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}